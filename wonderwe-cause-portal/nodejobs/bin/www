#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wonderwe:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3006');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io = require('socket.io').listen(server);

var delay;

delay = function(ms, cb) {
  return setTimeout(cb, ms);
};

process.once('SIGUSR2', function() {
  cleanup();
 // return delay(6000, function() {
   // return process.kill(process.pid, 'SIGUSR2');
  //});
});

//TODO: figure out why we need this delay.
delay(99999999, function() {
  return console.log('App exiting naturally');
});

function cleanup(){
    agenda.stop(function() {
      process.exit(0);
    });
    server._connections=0;
    server.close(function () {
        console.log("Closed out remaining connections.");
        pool.end(function (err) {
          // all connections in the pool have ended
          console.log('All Connections Ended');
        //  redisClient.quit();
          process.kill(process.pid, 'SIGUSR2');
          process.exit();
        });
    });

    setTimeout( function () {
        console.error("Could not close connections in time, forcing shut down");
        process.exit(1);
    }, 30*1000);
}

process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

